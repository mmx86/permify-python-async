# coding: utf-8

"""
    Permify API

    Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

    The version of the OpenAPI document: v0.8.7
    Contact: hello@permify.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from permify_async.models.schemas_partial_write_request import SchemasPartialWriteRequest

class TestSchemasPartialWriteRequest(unittest.TestCase):
    """SchemasPartialWriteRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SchemasPartialWriteRequest:
        """Test SchemasPartialWriteRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SchemasPartialWriteRequest`
        """
        model = SchemasPartialWriteRequest()
        if include_optional:
            return SchemasPartialWriteRequest(
                metadata = permify_async.models.schema_partial_write_request_metadata.SchemaPartialWriteRequestMetadata(
                    schema_version = '', ),
                partials = {
                    'key' : permify_async.models.partials_contains_the_write,_update_and_delete_definitions.Partials contains the write, update and delete definitions(
                        write = [
                            ''
                            ], 
                        delete = [
                            ''
                            ], 
                        update = [
                            ''
                            ], )
                    }
            )
        else:
            return SchemasPartialWriteRequest(
        )
        """

    def testSchemasPartialWriteRequest(self):
        """Test SchemasPartialWriteRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
